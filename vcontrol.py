from subprocess import Popen, PIPE
import re
import sys


import inspect
import os
work_dir = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))


def setOriginDir(script, m, _):
    script.write(m[:-4]+" [file dirname [info script]]"+"\n")


def addProjName(script, m, _):
    script.write(m+" \"${_xil_proj_name_}.tcl\""+"\n")


def delDefProjDir(script, m, _):
    script.write("#"+m+"\n")


def addCreateProj(script, m, _):
    script.write(
        m+" ${_xil_proj_name_} $origin_dir/${_xil_proj_name_} -part xc7a35tcpg236-1"+"\n")


def setIpOutputRepo(script, m, _):
    script.write(
        m+" -value \"$proj_dir/${_xil_proj_name_}.cache/ip\" -objects $obj"+"\n")


def setSimCetrnalDir(script, m, _):
    script.write(
        m+" -value \"$proj_dir/${_xil_proj_name_}.ip_user_files\" -objects $obj"+"\n")


def removeNew(script, _, line):
    line = re.sub(r'new/', "", line)
    script.write(line)


def removeRecursiveDirStructure(line):
    if (re.search(r'/imports/constrs', line) is not None) or (
            re.search(r'/imports/sources', line) is not None):
        line = re.sub(r'/imports/[a-zA-Z0-9_.-]+/', "/", line)
    else:
        line = re.sub(r'/imports/', "/", line)
        line = re.sub(r'/new/', "/", line)

    return line


def changePathNormalize(script, _, line):
    line = removeRecursiveDirStructure(line)
    if re.search(r'origin_dir/.*\.srcs', line) is not None:
        line = re.sub(r'origin_dir/.*\.srcs',
                      "origin_dir/${_xil_proj_name_}.srcs", line)
        script.write(line)
    elif re.search(r'origin_dir}/.*\.srcs', line) is not None:
        line = re.sub(r'origin_dir}/.*\.srcs',
                      "origin_dir}/${_xil_proj_name_}.srcs", line)
        script.write(line)


def copySrcFiles(script, m, line):
    if re.search(r'.*aep_design/aep_design.srcs/', line) is not None:
        file = re.sub(r'.*aep_design/aep_design.srcs/',
                      "aep_design.srcs/", line).strip("\"\n")
        file_nrecursive = removeRecursiveDirStructure(file)
        dest = os.path.dirname(file_nrecursive)
        if not os.path.isdir(dest):
            os.makedirs(dest)
        os.system("cp aep_design/{0} {1}".format(file, dest))
        script.write(m+file_nrecursive+"\"\n")
    else:
        file = re.sub(r'#    "', "", line).strip("\"\n")
        script.write(
            m+"ERROR:File couldnt be added to sources. Not in project directory: "+file+"\"\n")


def modifyTclScript(filename):
    rm_lines = (
        "set origin_dir [file dirname [info script]]", "set orig_proj_dir ***")

    marks = {"$origin_dir/": "changePathNormalize",
             "${origin_dir}/": "changePathNormalize",
             "set origin_dir \".\"": "setOriginDir",
             "set script_file": "addProjName",
             "set orig_proj_dir": "delDefProjDir",
             "create_project": "addCreateProj",
             "set_property -name \"ip_output_repo\"": "setIpOutputRepo",
             "set_property -name \"sim.central_dir\"": "setSimCetrnalDir",
             "#    \"": "copySrcFiles",
             "set file \"new": "removeNew"}

    os.system("cp {0} debug_script.tcl".format(filename))
    with open(filename, "r") as file:
        lines = file.readlines()
    with open(filename, "w+") as file:

        for line in lines:
            if not any([rm_line in line.strip("\n") for rm_line in rm_lines]):
                modify = [m in line for m in marks]

                if any(modify):
                    for i, c in enumerate(modify):
                        if c:
                            k_marks = list(marks.keys())
                            eval(marks[k_marks[i]]+"(file,k_marks[i],line)")
                else:
                    file.write(line)


def main():
    xpr_path = sys.argv[1]
    filename = 'aep_design.tcl'
    p = Popen(['vivado', '-mode', 'tcl',
               xpr_path], stdin=PIPE)
    cmd = "write_project_tcl -force {0}/aep_design.tcl\nexit\n".format(
        work_dir)
    print(cmd)
    p.communicate(input=str.encode(cmd))
    # Modify creater tcl script
    modifyTclScript(filename)
    # Remove log files generated by Vivado
    os.popen("rm {0}/*.jou {0}/*.log".format(work_dir))


if __name__ == "__main__":
    main()
